Binary files dpdk/.git/index and ovs-nuevomatchup/dpdk/.git/index differ
diff -ruN dpdk/kernel/linux/igb_uio/igb_uio.c ovs-nuevomatchup/dpdk/kernel/linux/igb_uio/igb_uio.c
--- dpdk/kernel/linux/igb_uio/igb_uio.c	2023-12-14 00:46:34.947135249 -0500
+++ ovs-nuevomatchup/dpdk/kernel/linux/igb_uio/igb_uio.c	2023-11-28 22:19:17.014442827 -0500
@@ -215,6 +215,7 @@
 #endif
 
 	switch (igbuio_intr_mode_preferred) {
+	/* falls through - to MSIX*/
 	case RTE_INTR_MODE_MSIX:
 		/* Only 1 msi-x vector needed */
 #ifndef HAVE_ALLOC_IRQ_VECTORS
@@ -235,7 +236,7 @@
 			break;
 		}
 #endif
-
+		//__attribute__((fallthrough));
 	/* falls through - to MSI */
 	case RTE_INTR_MODE_MSI:
 #ifndef HAVE_ALLOC_IRQ_VECTORS
@@ -255,6 +256,8 @@
 			break;
 		}
 #endif
+
+		//__attribute__((fallthrough));
 	/* falls through - to INTX */
 	case RTE_INTR_MODE_LEGACY:
 		if (pci_intx_mask_supported(udev->pdev)) {
@@ -265,6 +268,8 @@
 			break;
 		}
 		dev_notice(&udev->pdev->dev, "PCI INTX mask not supported\n");
+
+		//__attribute__((fallthrough));
 	/* falls through - to no IRQ */
 	case RTE_INTR_MODE_NONE:
 		udev->mode = RTE_INTR_MODE_NONE;
diff -ruN dpdk/kernel/linux/igb_uio/Makefile ovs-nuevomatchup/dpdk/kernel/linux/igb_uio/Makefile
--- dpdk/kernel/linux/igb_uio/Makefile	2023-12-14 00:46:34.947135249 -0500
+++ ovs-nuevomatchup/dpdk/kernel/linux/igb_uio/Makefile	2023-11-28 22:21:20.547768980 -0500
@@ -15,6 +15,7 @@
 MODULE_CFLAGS += -I$(SRCDIR) --param max-inline-insns-single=100
 MODULE_CFLAGS += -I$(RTE_OUTPUT)/include
 MODULE_CFLAGS += -Winline -Wall -Werror
+MODULE_CFLAGS += -Wno-error=implicit-fallthrough
 MODULE_CFLAGS += -include $(RTE_OUTPUT)/include/rte_config.h
 
 #
diff -ruN dpdk/kernel/linux/kni/compat.h ovs-nuevomatchup/dpdk/kernel/linux/kni/compat.h
--- dpdk/kernel/linux/kni/compat.h	2023-12-14 00:46:34.947135249 -0500
+++ ovs-nuevomatchup/dpdk/kernel/linux/kni/compat.h	2023-11-28 22:33:40.316109969 -0500
@@ -121,7 +121,15 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
 #define HAVE_SIGNAL_FUNCTIONS_OWN_HEADER
 #endif
+//------------------------------------------------
+#if KERNEL_VERSION(5, 6, 0) <= LINUX_VERSION_CODE
+#define HAVE_TX_TIMEOUT_TXQUEUE
+#endif
 
+#if KERNEL_VERSION(5, 9, 0) > LINUX_VERSION_CODE
+#define HAVE_TSK_IN_GUP
+#endif
+//------------------------------------------------
 /*
  * iova to kva mapping support can be provided since 4.6.0, but required
  * kernel version increased to >= 4.10.0 because of the updates in
diff -ruN dpdk/kernel/linux/kni/kni_dev.h ovs-nuevomatchup/dpdk/kernel/linux/kni/kni_dev.h
--- dpdk/kernel/linux/kni/kni_dev.h	2023-12-14 00:46:34.947135249 -0500
+++ ovs-nuevomatchup/dpdk/kernel/linux/kni/kni_dev.h	2023-11-28 22:35:00.237033341 -0500
@@ -100,9 +100,19 @@
 
 	offset = iova & (PAGE_SIZE - 1);
 
-	/* Read one page struct info */
-	ret = get_user_pages_remote(tsk, tsk->mm, iova, 1,
+
+#ifdef HAVE_TSK_IN_GUP
+ 	ret = get_user_pages_remote(tsk, tsk->mm, iova, 1,
+ 				    FOLL_TOUCH, &page, NULL, NULL);
+#else
+	ret = get_user_pages_remote(tsk->mm, iova, 1,
 				    FOLL_TOUCH, &page, NULL, NULL);
+#endif
+	
+	
+//	/* Read one page struct info */
+//	ret = get_user_pages_remote(tsk, tsk->mm, iova, 1,
+//				    FOLL_TOUCH, &page, NULL, NULL);
 	if (ret < 0)
 		return 0;
 
diff -ruN dpdk/kernel/linux/kni/Makefile ovs-nuevomatchup/dpdk/kernel/linux/kni/Makefile
--- dpdk/kernel/linux/kni/Makefile	2023-12-14 00:46:34.947135249 -0500
+++ ovs-nuevomatchup/dpdk/kernel/linux/kni/Makefile	2023-11-28 22:26:19.603079610 -0500
@@ -15,7 +15,8 @@
 MODULE_CFLAGS += -I$(RTE_OUTPUT)/include
 MODULE_CFLAGS += -include $(RTE_OUTPUT)/include/rte_config.h
 MODULE_CFLAGS += -Wall -Werror
-
+MODULE_CFLAGS += -Wno-error=incompatible-pointer-types
+MODULE_CFLAGS += -Wno-error=int-conversion
 -include /etc/lsb-release
 
 ifeq ($(DISTRIB_ID),Ubuntu)
